* Table of Contents :toc:
- [[#key-bindings][Key Bindings]]
- [[#packages][Packages]]
  - [[#org-mode][Org Mode]]
  - [[#projectile][Projectile]]
  - [[#neotree][Neotree]]
  - [[#centaur-tabs][Centaur Tabs]]
  - [[#magit][Magit]]
  - [[#org-trello][Org Trello]]
  - [[#leetcode][LeetCode]]
  - [[#evil][Evil]]
- [[#settings][Settings]]
  - [[#generic-settings][Generic Settings]]
  - [[#tabs-windows-panes-etc][Tabs, Windows, Panes, etc.]]
  - [[#clipboard-settings][Clipboard Settings]]
- [[#appearance][Appearance]]
- [[#functions][Functions]]

* Key Bindings
#+BEGIN_SRC emacs-lisp :tangle "config.el"
(load (expand-file-name "config/settings/keybindings.el" (file-name-directory load-file-name)))
#+END_SRC
* Packages
** Org Mode
#+BEGIN_SRC emacs-lisp :tangle "config.el"
(load (expand-file-name "config/packages/org-mode.el" (file-name-directory load-file-name)))
#+END_SRC
** Projectile
#+BEGIN_SRC emacs-lisp :tangle "config.el"
(load (expand-file-name "config/packages/proj-persp.el" (file-name-directory load-file-name)))
#+END_SRC
** Neotree
#+BEGIN_SRC emacs-lisp :tangle "config.el"
(load (expand-file-name "config/packages/neotree.el" (file-name-directory load-file-name)))
#+END_SRC
** Centaur Tabs
#+BEGIN_SRC emacs-lisp :tangle "config.el"
(load (expand-file-name "config/packages/centaur-tabs.el" (file-name-directory load-file-name)))
#+END_SRC
** Magit
#+BEGIN_SRC emacs-lisp :tangle "config.el"
(load (expand-file-name "config/packages/magit.el" (file-name-directory load-file-name)))
#+END_SRC
** Org Trello
#+BEGIN_SRC emacs-lisp :tangle "config.el"
(load (expand-file-name "config/packages/org-trello.el" (file-name-directory load-file-name)))
#+END_SRC
** LeetCode
#+BEGIN_SRC emacs-lisp :tangle "config.el"
(load (expand-file-name "config/packages/leetcode.el" (file-name-directory load-file-name)))
#+END_SRC
** Evil
#+BEGIN_SRC emacs-lisp :tangle "config.el"
(load (expand-file-name "config/packages/evil.el" (file-name-directory load-file-name)))
#+END_SRC
* Settings
** Generic Settings
#+BEGIN_SRC emacs-lisp :tangle "config.el"
;; -*- no-byte-compile: t; -*-

(add-hook 'doom-after-init-hook
          (lambda () (doom/quickload-session t)))

(defadvice! reload-with-tangle ()
  "Tangle README.org before reloading Doom Emacs."
  :before #'doom/reload
  (org-babel-tangle-file (expand-file-name "README.org" doom-private-dir)))

;; Don't prompt when exiting.
(setq confirm-kill-emacs nil)

;; Visual line mode
(global-visual-line-mode)

;; Blink cursor mode.
(blink-cursor-mode 1)

;; Disable highlight line mode.
(remove-hook 'doom-first-buffer-hook #'global-hl-line-mode)

;; Disable flyspell.
(remove-hook 'text-mode-hook #'flyspell-mode)
(remove-hook 'prog-mode-hook #'flyspell-prog-mode)

;; Suppress warnings.
(setq warning-suppress-types
      '((obsolete)
        (bytecomp)
        (bytecomp . buffer-local-value)))
(setq enable-local-variables :all)

(after! emacs
  (find-file "~/.doom.d/README.org")
  (neotree))

(setq frame-title-format
      '((:eval (if (projectile-project-p)
                   (projectile-project-name)
                 ""))))
#+END_SRC

** Tabs, Windows, Panes, etc.
#+BEGIN_SRC emacs-lisp :tangle "config.el"
(load (expand-file-name "config/settings/editor.el" (file-name-directory load-file-name)))
#+END_SRC
** Clipboard Settings
#+BEGIN_SRC emacs-lisp :tangle "config.el"
(load (expand-file-name "config/settings/clipboard.el" (file-name-directory load-file-name)))
#+END_SRC
* Appearance
#+BEGIN_SRC emacs-lisp :tangle "config.el"
(load (expand-file-name "config/settings/appearance.el" (file-name-directory load-file-name)))
#+END_SRC
* Functions
#+BEGIN_SRC emacs-lisp :tangle "config.el"
(load (expand-file-name "config/utils.el" (file-name-directory load-file-name)))
#+END_SRC
